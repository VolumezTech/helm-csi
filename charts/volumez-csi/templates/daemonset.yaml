kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: vlz-csi-node
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: vlz-csi-node
  template:
    metadata:
      labels:
        app: vlz-csi-node
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    spec:
      serviceAccountName: vlz-csi-node-sa
      terminationGracePeriodSeconds: 30
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
        runAsGroup: 0
        fsGroup: 0
      initContainers:
        - name: vlz-connector-init
          securityContext:
            privileged: true
          image: "{{ .Values.vlzCsiDriver.repository }}:{{ .Values.vlzCsiDriver.tag }}"
          args:
            - "--mode=connector"
            - "--nodeid=$(NODE_ID)"
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--volumez-endpoint=$(VOLUMEZ_ENDPOINT)"
            - "--volumez-endpoint-base-path=$(VOLUMEZ_ENDPOINT_BASE_PATH)"
            - "--volumez-auth-token=$(VOLUMEZ_AUTH_TOKEN)"
            - "--connector-force-install=$(CONNECTOR_FORCE_INSTALL)"
            - "--connector-download-repository-base-url=$(CONNECTOR_DOWNLOAD_REPOSITORY_BASE_URL)"
            - "--connector-api-domain=$(CONNECTOR_API_DOMAIN)"
            - "--env-id=$(ENV_ID)"
            - "--driver-suffix=$(DRIVER_NAME_SUFFIX)"
            - "--v=$(VERBOSE_LEVEL)"
          env:
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          envFrom:
            - configMapRef:
                name: vlz-config
          imagePullPolicy: "Always"
          volumeMounts:
            - mountPath: /lib/modules
              name: lib-modules
            - mountPath: /sys
              name: sysfs
            - mountPath: /dev
              name: dev
            - mountPath: /run/dbus
              name: systemd
            - mountPath: /tmp/volumez
              name: connector-config
      containers:
        - name: node-driver-registrar
          image: registry.k8s.io/sig-storage/csi-node-driver-registrar:{{ .Values.sidecars.registrar.tag }}
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "rm -rf /registration/csi-vlzplugin /registration/csi-vlzplugin-reg.sock"]
          args:
            - --v=5
            - --csi-address=/plugin/csi.sock
            - --kubelet-registration-path=/var/lib/kubelet/plugins/csi-vlzplugin/csi.sock
          env:
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: plugin-dir
              mountPath: /plugin
            - name: registration-dir
              mountPath: /registration
          securityContext:
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
        - name: vlz
          image: "{{ .Values.vlzCsiDriver.repository }}:{{ .Values.vlzCsiDriver.tag }}"
          lifecycle:
            preStop:
              httpGet:
                path: "/cleanup"
                port: 3333
          args:
            - "--mode=node"
            - "--nodeid=$(NODE_ID)"
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--volumez-endpoint=$(VOLUMEZ_ENDPOINT)"
            - "--volumez-endpoint-base-path=$(VOLUMEZ_ENDPOINT_BASE_PATH)"
            - "--volumez-auth-token=$(VOLUMEZ_AUTH_TOKEN)"
            - "--driver-suffix=$(DRIVER_NAME_SUFFIX)"
            - "--enable-metrics=$(ENABLE_METRICS)"
            - "--v=$(VERBOSE_LEVEL)"
          env:
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          envFrom:
            - configMapRef:
                name: vlz-config
          imagePullPolicy: "Always"
          securityContext:
            privileged: true
          {{- if .Values.metrics.enable }}
          ports:
            - name: metrics
              containerPort: 8080
              protocol: TCP
          {{- end }}
          volumeMounts:
            - name: plugin-dir
              mountPath: /plugin
            - name: pods-mount-dir
              mountPath: /var/lib/kubelet/pods
              mountPropagation: "Bidirectional"
            - name: volume-devices-dir
              mountPath: /var/lib/kubelet/plugins/kubernetes.io/csi/volumeDevices
              mountPropagation: "Bidirectional"
            - mountPath: /lib/modules
              name: lib-modules
            - mountPath: /sys
              name: sysfs
            - mountPath: /dev
              name: dev
            - mountPath: /run/dbus
              name: systemd
            - mountPath: /tmp/volumez
              name: connector-config
      volumes:
        - name: plugin-dir
          hostPath:
            path: /var/lib/kubelet/plugins/csi-vlzplugin
            type: DirectoryOrCreate
        - name: pods-mount-dir
          hostPath:
            path: /var/lib/kubelet/pods
            type: Directory
        - hostPath:
            path: /var/lib/kubelet/plugins_registry
            type: Directory
          name: registration-dir
        - hostPath:
            path: /var/lib/kubelet/plugins/kubernetes.io/csi/volumeDevices
            type: DirectoryOrCreate
          name: volume-devices-dir
        - name: lib-modules
          hostPath:
            path: /lib/modules
            type: Directory
        - name: sysfs
          hostPath:
            path: /sys
            type: Directory
        - name: dev
          hostPath:
            path: /dev
            type: Directory
        - name: systemd
          hostPath: 
            path: /run/dbus
            type: Directory
        - name: connector-config
          emptyDir:
            sizeLimit: 1Mi
{{- if .Values.node.tolerations }}
      tolerations:
{{ toYaml .Values.node.tolerations | indent 8 }}
{{- end -}}
{{- if .Values.node.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.node.nodeSelector | indent 8 }}
{{- end -}}
{{- if .Values.node.affinity }}
      affinity:
{{ toYaml .Values.node.affinity | indent 8 }}
{{- end -}}
